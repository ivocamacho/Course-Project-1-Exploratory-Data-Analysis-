install.packages(slidify)
utils:::menuInstallPkgs()
q()
utils:::menuInstallPkgs()
q()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
swirl()
install.packages("swirl")
library("swirl")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5
| == 6, !FALSE)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which (ints > 7)
any(ints<0)
all(ints>0)
q()
install.packages("swirl")
library('swirl")
library('swirl')
library('swirl')
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num =
| 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8)
)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c('Hi!', 'I', 'hope', 'you're','fine','.'))
telegram(c('Hi!', 'I', 'hope', 'you', 'are','fine','.'))
submit()
mad_libs(place = "Diliman", adjective = "beautiful", noun = "me")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
"I" %p% "love" %p% "R!"
q()
install.packages('swirl')
library('swirl')
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1,-Sys.time()
t1<-Sys.time()
tl
t1
class(t1)
unclass(t1)
tz <- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <-"October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
clas(t4)
class(t4)
Sys.time() >
| t1
Sys.time() >t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
q()
library (swirl)
swir()
swirl()
sapply(flags,unique)
vapply(flags, unique,numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$lanmass, summary)
tapply(flags$population, flags$landmass, summary)
q()
load("~/.RData")
load("~/.RData")
library(datasets)
data(iris)
?iris
tapply(iris$virginica, mean)
tapply(iris$virginica, mean)
apply(iris, 2, mean)
tapply(iris$Species, mean)
apply(iris$Species, mean)
sapply(iris$Species, mean)
with(iris$Species, mean)
with(iris,mean)
with(iris)
apply(iris,mean)
tapply(iris,mean)
sapply(iris,mean)
sapply(iris[1],mean)
vapply(iris[1],mean)
sapply(iris[1],mean)
tapply(iris[1],mean)
sapply(iris[,1],mean)
sapply(iris[1,],mean)
sapply(iris[1,3],mean)
library (swirl)
swir()
swirl()
library(datasets)
data(iris)
?iris
sapply(iris[1,3],mean)
sapply(iris[1,3],mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
library(datasets)
data(mtcars)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
makeCacheMatrix <- function(x = matrix()) {inv <- NULL
set <- function(y) {
x <<- y inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv<<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(1)
rpois(5, 2)
best("SC", "heart attack")
library "swirl"
install.packages 'swirl'
q()
install.packages ('swirl')
library ('swirl')
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x,y)
plot(x = cars$speed, y = cars$dist)
plot(dist ~ speed, cars)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars,xlim = c(10, 15)
)
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
q()
library(sqldf)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile = "quiz2data.csv")
acs <- read.csv("quiz2data.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table::data.table(read.csv(f))
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
library(sqldf)
sqldf("select distinct AGEP from acs")
libray(xml)
library(xml)
library("XML')
library("XML")
library("XML")
library(data.table)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n = 10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", 
              "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", 
              "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header = FALSE, skip = 4, col.names = colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
              , 'ACS.csv'
              , method='curl' )
# Read data into data.frame
ACS <- read.csv('ACS.csv')
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
# Read data into data.frame
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
              , 'ACS.csv'
)
ACS <- read.csv('ACS.csv')
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
install.packages('jpeg')
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
              , 'jeff.jpg'
              , mode='wb' )download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
              , 'jeff.jpg'
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg','jeff.jpg',mode='wb')
picture <- jpeg::readJPEG('jeff.jpg'
                          , native=TRUE)
quantile(picture, probs = c(0.3, 0.8) )
library("data.table")
# Download data and read FGDP data into data.table
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
                          , skip=4
                          , nrows = 190
                          , select = c(1, 2, 4, 5)
                          , col.names=c("CountryCode", "Rank", "Economy", "Total")
                          )
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
                                      )
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
mergedDT[order(-Rank)][13,.(Economy)]
nrow(mergedDT)
utils:::menuInstallPkgs()
library('dplyr')
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
communities <- data.table::fread("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
varNamesSplit <- strsplit(names(communities), "wgtp")
varNamesSplit[[123]]
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
                    , skip=5
                    , nrows=190
                    , select = c(1, 2, 4, 5)
                    , col.names=c("CountryCode", "Rank", "Country", "GDP")
)
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
)
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
                    , skip=5
                    , nrows=190
                    , select = c(1, 2, 4, 5)
                    , col.names=c("CountryCode", "Rank", "Country", "GDP")
)
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
eduDT <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
mergedDT <- merge(GDPrank, eduDT, by = 'CountryCode')
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Notes`]), .N]
utils:::menuInstallPkgs()
library("quantmod")
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn) 
timeDT <- data.table::data.table(timeCol = sampleTimes)
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N ]
timeDT[((timeCol >= "2012-01-01") & (timeCol < "2013-01-01")) & (weekdays(timeCol) == "Monday"), .N ]
query1 <- sqldf("select pwgtp1 from acs where AGEP <40")
query1()
query1
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
mergedDT[`Income Group` == "High income: OECD"
         , lapply(.SD, mean)
         , .SDcols = c("Rank")
)
mergedDT[`Income Group` == "High income: OECD"
         , lapply(.SD, mean)
         , .SDcols = c("Rank")
         , .SDcols = c("Rank")
)
mergeDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank")
,by = "Income Group"]
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
 mergeDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank")
+ ,by = "Income Group"]
 mergeDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
 mergeDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
mergeDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
 mergeDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
mergeDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
                          , skip=4
                          , nrows = 190
                          , select = c(1, 2, 4, 5)
                          , col.names=c("CountryCode", "Rank", "Economy", "Total")
                          )
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
                                      )
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
mergedDT['Income Group' =="Low income", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
mergedDT['Income Group' =="Upper Mime", lapply(.SD, mean), .SDcols = c("Rank"), by = "Income Group"]
unique(acs$OCCP)
sqldf("select distinct OCCP from acs")
library("XML")
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- XML::xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
rootNode <- XML::xmlRoot(doc)
zipcodes <- XML::xpathSApply(rootNode, "//zipcode", XML::xmlValue)
xmlZipcodeDT <- data.table::data.table(zipcode = zipcodes)
xmlZipcodeDT[zipcode == "21211", .N]
q()
getwd()
read.csv("mydata.csv")
dir()
q()
utils:::menuInstallPkgs()
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low()
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=meadian(ppm), col=magenta, lwd=4)
abline(v=median(ppm), col=magenta, lwd=4)
median(ppm)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
table(region)
reg<- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region)
barplot(reg, col="wheat", main="Number of Counties in Each Region")
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(data=pollution, col="red")
boxplot(pm25~region=pollution, col="red")
boxplot(pm25~region, col="red")
x
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution, region="east")
east<-subset(pollution, region==\"east")
east<-subset(pollution, region=="east")
head(east)
hist(pm25~east, col="green")
hist(pm25~region=east, col="green")
hist(pm25~region=east,data=pollution, col="green")
hist(pm25~regioneast,data=pollution, col="green")
x
hist(pm25$east, col="green")
hist(east$pm25, col="green")
hist(west$pm25, col="green")
west<-subset(pollution, region=="west")
hist(subset(pollution, region=="west")$pm25, col="green")
x
with(pollution, plot(latitude, pm25))
abline(12, lwd=2, lty=2)
abline(12, lwd="2", lty="2")
abline(12, lwd = "2", lty = "2")
abline(12=12, lwd = "2", lty = "2")
abline(lwd = "2", lty = "2")
abline(12, lwd = "2", lty = "2")
z
abline(h=12, lwd = "2", lty = "2")
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="Eastt")
plot(east$latitude, east$pm25, main="East")
q()
utils:::menuInstallPkgs()
library("data.table")
setwd("C:/Users/Maria Ivora Camacho/Documents/GitHub/Course-Project-1-Exploratory-Data-Analysis-")
# reading data from a text file
HPCdata <- data.table::fread(input = "household_power_consumption.txt"
                             , na.strings="?"
                             )
# do not print sci. notation in the histogram
HPCdata[, Global_active_power := lapply(.SD, as.numeric), .SDcols = c("Global_active_power")]
# from coursera instruction change date and time variables to date/time classes
HPCdata[, Date := lapply(.SD, as.Date, "%d/%m/%Y"), .SDcols = c("Date")]
# using dates from 2007-02-01 and 2007-02-02
HPCdata <- HPCdata[(Date >= "2007-02-01") & (Date <= "2007-02-02")]
png("plot1.png", width=480, height=480)
## plot 1
hist(HPCdata[, Global_active_power], main="Global Active Power", 
     xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.off()
dev.off()
hist(HPCdata[, Global_active_power], main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
hist(HPCdata[, Global_active_power], main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
q()
